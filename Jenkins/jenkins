def branchName               =  "main"
def gitUrl                   =  "git@github.com:MomenRahahleh/momen30.git"
def serviceName              =  "mo-todo-list"
def EnvName                  =  "dev"
def imageTag                 =  "${EnvName}_${BUILD_NUMBER}"
def awsRegion                =  "us-east-2"
def ecrUrl                   =  "727245885999.dkr.ecr.us-east-2.amazonaws.com"
def helmDir                  = "/var/lib/jenkins/workspace/momen/slashtec/momen30/helm/charts/slashtec-helm-chart"


node () {
    cleanWs()
    try {
        notifyBuild('STARTED')
        
        script {
            properties([
                parameters([
                    string(defaultValue: 'main', name: 'branchName')
                ])
            ])
        }

stage ("Get the app code")
    {
      checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]] , extensions: [], userRemoteConfigs: [[ url: "${gitUrl}"]]])    
        sh "rm -rf ~/workspace/momen/slashtec"
        sh "mkdir ~/workspace/momen/slashtec  ; cd slashtec ; git clone -b main ${gitUrl} "
        //sh "pwd"
        sh("cp /var/lib/jenkins/workspace/momen/slashtec/momen30/Docker/Dockerfile . ")
        sh("cp /var/lib/jenkins/workspace/momen/slashtec/momen30/Docker/index.html .")   
        sh("cp /var/lib/jenkins/workspace/momen/slashtec/momen30/Docker/info.php .")
        sh("cp /var/lib/jenkins/workspace/momen/slashtec/momen30/Docker/nginx.conf .")
        sh("cp /var/lib/jenkins/workspace/momen/slashtec/momen30/Docker/supervisord.conf .")
        sh("cp /var/lib/jenkins/workspace/momen/slashtec/momen30/Docker/todo_list.php .")        

}

        stage ('ECR Login') {
            sh "aws ecr get-login-password --region ${awsRegion} | docker login --username AWS --password-stdin ${ecrUrl}"
        }  

        stage ('Docker Build') {
            dir('Docker') {
                sh "cd /var/lib/jenkins/workspace/momen ; docker build -t ${ecrUrl}/${serviceName}:${imageTag} -f Dockerfile ."
            }
        }

        stage ('Docker Push') {
            sh "docker push ${ecrUrl}/${serviceName}:${imageTag}"
        }  

        stage ("change image tag") 
      {
            // Change image tag in values.yaml
            sh """
            cd ${helmDir}
            yq eval -i '.deployment.image.tag = "${imageTag}"' values.yaml
            """
            
            // Change appVersion in Chart.yaml
            sh """
            cd ${helmDir}
            yq eval -i '.appVersion = "${imageTag}"' Chart.yaml
            """
            
            // Commit changes to git
            sh """
            cd ${helmDir}
            git pull
            git add values.yaml
            git add Chart.yaml
            git commit -m '${serviceName}_${namespace}_build_${BUILD_NUMBER}'
            git push ${gitUrl}
            """       }

        stage('Remove Local Images') {
            sh "docker rmi -f ${ecrUrl}/${imageTag} || :"
        }   
    } catch (e) {
        currentBuild.result = "FAILED"
        throw e
    } finally {
        notifyBuild(currentBuild.result)
    }
}

def notifyBuild(String buildStatus = 'STARTED') {
    buildStatus = buildStatus ?: 'SUCCESSFUL'

    def colorCode = '#FF0000'
    def subject = "${buildStatus}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
    def summary = "${subject} (${env.BUILD_URL})"

    if (buildStatus == 'STARTED') {
        colorCode = '#FFFF00'
    } else if (buildStatus == 'SUCCESSFUL') {
        colorCode = '#00FF00'
    }
    // slackSend or other notification methods go here
}
